#硬件要求
Master 要 2G 内存和 2Core
#
hostnamectl --static set-hostname  master
hostnamectl --static set-hostname  node1
#
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup

#CentOS5 ：http://mirrors.163.com/.help/CentOS5-Base-163.repo
#CentOS6 ：http://mirrors.163.com/.help/CentOS6-Base-163.repo
#CentOS7 ：http://mirrors.163.com/.help/CentOS7-Base-163.repo

#wget http://mirrors.163.com/.help/CentOS7-Base-163.repo
#mv CentOS6-Base-163.repo CentOS-Base.repo
#可以在/etc/yum.conf中指定：
#cachedir=/var/cache/yum
#keepcache=1  #1为保存，0为不保存

yum clean all
yum makecache

yum install -y wget
#yum install -y scp

#kubeadmin 安装k8s

#关闭firewalld
systemctl stop firewalld; systemctl disable firewalld 
#关闭SElinux
setenforce 0; sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config
#关闭Swap
swapoff -a; sed -i "s/\/dev\/mapper\/centos-swap/\#\/dev\/mapper\/centos-swap/g" /etc/fstab 
#使用阿里云yum源
wget -O /etc/yum.repos.d/CentOS7-Aliyun.repo http://mirrors.aliyun.com/repo/Centos-7.repo  

#
cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
#
sysctl --system

#
cat  <<EOF >>  /etc/hosts
192.168.188.202 master
192.168.188.203 node1
EOF

#
wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 
#
yum install docker-ce -y 
#
systemctl enable docker;systemctl start docker

#
mkdir -p /etc/docker
tee /etc/docker/daemon.json <<-'EOF'
{
  "exec-opts":["native.cgroupdriver=systemd"]
}
EOF
systemctl daemon-reload
systemctl restart docker

#
docker info |grep Cgroup

#
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF


#
yum install -y kubelet kubeadm kubectl 

#
systemctl enable kubelet;systemctl start kubelet


#Master
#可以选择去建立阿里云仓库吧

#docker images |awk '{print "docker rmi -f ",$3}'|sh -x #删除所有镜像

#使用阿里云仓库
#kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers
kubeadm config images list |sed -e 's/^/docker pull /g' -e 's#k8s.gcr.io#registry.aliyuncs.com/google_containers#g' |sh -x
docker images |grep registry.aliyuncs.com |awk '{print "docker tag ",$1":"$2,$1":"$2}' |sed -e 's#registry.aliyuncs.com/google_containers#k8s.gcr.io#2' |sh -x

docker pull registry.aliyuncs.com/google_containers/coredns:v1.8.6
docker tag a4ca41631cc7 k8s.gcr.io/coredns/coredns:v1.8.6
#删除镜像
docker images |grep registry.aliyuncs.com/google_containers |awk '{print "docker rmi ", $1":"$2}' |sh -x


#Master
#kubeadm init --apiserver-advertise-address=192.168.188.202  --image-repository mirrorgcrio  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16 --ignore-preflight-errors=Swap,NumCPU
kubeadm init --apiserver-advertise-address=192.168.188.202 --service-cidr=10.10.0.0/16 --pod-network-cidr=10.122.0.0/16 --ignore-preflight-errors=Swap,NumCPU

mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

kubectl apply -f kube-flannel.yml

kubectl get pods --all-namespaces
kubectl get nodes

#Yum包复制
#scp -rv /var/cache/yum/* root@192.168.188.203:/var/cache/yum/
#重置集群
#kubeadm reset
#rm -rf $HOME/.kube

#node	要看master的输出
#kubeadm join 192.168.188.202:6443 --token o3hp7a.jfwt8riccqqkw70t \
#       --discovery-token-ca-cert-hash sha256:79cfe6c9863f4d05374e9f95f671db209992dd3e8ea8c2a8713bc2603c640d1f

kubectl get nodes
###The connection to the server localhost:8080 was refused - did you specify the right host or port?
#scp -r /etc/kubernetes/admin.conf ${node1}:/etc/kubernetes/admin.conf
#echo "export KUBECONFIG=/etc/kubernetes/admin.conf" >> ~/.bash_profile
#source ~/.bash_profile

#node删除配置文件
rm -f /etc/kubernetes/kubelet.conf
systemctl restart docker kubelet
rm -f /etc/kubernetes/pki/ca.crt
docker ps -qa | xargs docker rm -f
rm -f /etc/kubernetes/admin.conf

#生成注册命令
kubeadm token create --print-join-command
#

kubectl apply -f kube-flannel.yml

